import hashlib
import math
import random
import time
start_time = time.time()
def keygen(bin_key,bin_message):
    ipad='00110110'#the default ipad
    opad='01011100'#the default opad
    padding_ipad=ipad*int(len(bin_message)/8)#the ipad is mutlipied until it reaches the lenght of message
    padding_opad=opad*int(len(bin_message)/8)#the opad is mutlipied until it reaches the lenght of message
    s1=''
    s2=''
    if(len(bin_key)!=len(bin_message)):#if the key lenght is less than message then it is padded with 0 usually 0<k<b
        no_of_zeros=(len(bin_message)-len(bin_key))*'0'
        final_key=no_of_zeros+bin_key
    else:
        final_key=bin_key
    for x in range(len(final_key)):#the S1 is generated by XOR of padding of ipad and key
        if(final_key[x]==padding_ipad[x]):
            s1=s1+'0'
        else:
            s1=s1+'1'
    for y in range(len(final_key)):#the S2 is generated by XOR of padding of opad and key
        if(final_key[y]==padding_opad[y]):
            s2=s2+'0'
        else:
            s2=s2+'1'
    return s1,s2


  

def hashgenerator(message):
    hasher=hashlib.sha256()#this is a pre built library that allows to generate md5 hash for a text
    sendermessage=(message).encode()#the message is encoded to utf-8
    hasher.update(sendermessage)
    bin_hash = "{0:08b}".format(int(hasher.hexdigest(), 16))#the hash is generated and converted from hex to binary
    return bin_hash



message="srmapuniversitychandanstudent"#message declared by the user
bin_message = ''.join(format(ord(i), '08b') for i in message)#message converted to binary
key="0079"#in the improved version the key in predefined 
bin_key = ''.join(format(ord(i), '08b') for i in key)
bin_message = ''.join(format(ord(i), '08b') for i in message)
s1,s2=keygen(bin_key, bin_message)#and it also pre-computed saving the user huge  amount of computational and time cost
#keep the key constant is not a very secure protocol but the time saved helps overpower the flaws
for x in range(100000):#the loop repeats itself for 1,00,000 times 
    hash1=hashgenerator(s1+bin_message)#the first hash is generated with S1
    if(len(hash1)<len(bin_message)):#if the hash generated is less than b bits then it is padded
        no_of_zeros=(len(bin_message)-len(hash1))*'0'#the paddding is done with 0's
        hash1=no_of_zeros+hash1#padding is appended
    hash2=hashgenerator(s2+hash1)#the second round of hashing is done with S2
    #hash2=hex(int(hash2,2))
    #print("This is the final hash code",hash2)

print ("The improved version took ", time.time() - start_time, "to run")




